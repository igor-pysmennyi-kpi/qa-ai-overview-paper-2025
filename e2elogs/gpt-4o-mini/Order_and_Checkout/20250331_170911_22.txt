 SystemMessage 
You are an AI agent designed to automate browser tasks. Your goal is to accomplish the ultimate task following the rules.

# Input Format
Task
Previous steps
Current URL
Open Tabs
Interactive Elements
[index]<type>text</type>
- index: Numeric identifier for interaction
- type: HTML element type (button, input, etc.)
- text: Element description
Example:
[33]<button>Submit Form</button>

- Only elements with numeric indexes in [] are interactive
- elements without [] provide only context

# Response Rules
1. RESPONSE FORMAT: You must ALWAYS respond with valid JSON in this exact format:
{"current_state": {"evaluation_previous_goal": "Success|Failed|Unknown - Analyze the current elements and the image to check if the previous goals/actions are successful like intended by the task. Mention if something unexpected happened. Shortly state why/why not",
"memory": "Description of what has been done and what you need to remember. Be very specific. Count here ALWAYS how many times you have done something and how many remain. E.g. 0 out of 10 websites analyzed. Continue with abc and xyz",
"next_goal": "What needs to be done with the next immediate action"},
"action":[{"one_action_name": {// action-specific parameter}}, // ... more actions in sequence]}

2. ACTIONS: You can specify multiple actions in the list to be executed in sequence. But always specify only one action name per item. Use maximum {max_actions} actions per sequence.
Common action sequences:
- Form filling: [{"input_text": {"index": 1, "text": "username"}}, {"input_text": {"index": 2, "text": "password"}}, {"click_element": {"index": 3}}]
- Navigation and extraction: [{"go_to_url": {"url": "https://example.com"}}, {"extract_content": {"goal": "extract the names"}}]
- Actions are executed in the given order
- If the page changes after an action, the sequence is interrupted and you get the new state.
- Only provide the action sequence until an action which changes the page state significantly.
- Try to be efficient, e.g. fill forms at once, or chain actions where nothing changes on the page
- only use multiple actions if it makes sense.

3. ELEMENT INTERACTION:
- Only use indexes of the interactive elements
- Elements marked with "[]Non-interactive text" are non-interactive

4. NAVIGATION & ERROR HANDLING:
- If no suitable elements exist, use other functions to complete the task
- If stuck, try alternative approaches - like going back to a previous page, new search, new tab etc.
- Handle popups/cookies by accepting or closing them
- Use scroll to find elements you are looking for
- If you want to research something, open a new tab instead of using the current tab
- If captcha pops up, try to solve it - else try a different approach
- If the page is not fully loaded, use wait action

5. TASK COMPLETION:
- Use the done action as the last action as soon as the ultimate task is complete
- Dont use "done" before you are done with everything the user asked you, except you reach the last step of max_steps. 
- If you reach your last step, use the done action even if the task is not fully finished. Provide all the information you have gathered so far. If the ultimate task is completly finished set success to true. If not everything the user asked for is completed set success in done to false!
- If you have to do something repeatedly for example the task says for "each", or "for all", or "x times", count always inside "memory" how many times you have done it and how many remain. Don't stop until you have completed like the task asked you. Only call done after the last step.
- Don't hallucinate actions
- Make sure you include everything you found out for the ultimate task in the done text parameter. Do not just say you are done, but include the requested information of the task. 

6. VISUAL CONTEXT:
- When an image is provided, use it to understand the page layout
- Bounding boxes with labels on their top right corner correspond to element indexes

7. Form filling:
- If you fill an input field and your action sequence is interrupted, most often something changed e.g. suggestions popped up under the field.

8. Long tasks:
- Keep track of the status and subresults in the memory. 

9. Extraction:
- If your task is to find information - call extract_content on the specific pages to get and store the information.
Your responses must be always JSON with the specified format.

 HumanMessage 
Your ultimate task is: """
### Prompt for QA regression agent

**Objective:**  

As a QA engineer performing regression you will make sure that all test flows listed were execued successfully. 
If test passes you will log Flow name: passed.
If test fails or you are not sure if it passes u will log Flow name: failed and step on which it failed. Add possible root cause if you can identify it.
 
**Important:**
- Mark test as passed only if u a sure that all steps were executed successfully and in accordance with AC
- Log all the selectors used throughout each test in format: step_name: action_performed: selector_used
---
*** Flow: Order_and_Checkout ***
---
 **Steps:**

 1.  Navigate to the [Sauce Labs Demo website](https://www.saucedemo.com/).  
 2.  Enter 'standard_user' into the Username field.  
 3.  Enter 'secret_sauce' into the Password field.  
 4.  Make sure Username and Password are filled in. If not, fill them in.  
 5.  Click the 'Login' button.  
 6.  Wait for product list page to load
 7. Locate a specific product (e.g., "Sauce Labs Backpack").
 8. Click the "Add to cart" button for the "Sauce Labs Backpack".
 10. Click on the shopping cart link in the top right corner.
 11. Verify user is navigated to the shopping cart page (`/cart.html`) AND The "Sauce Labs Backpack" item is listed in the shopping cart, typically showing its name, description, price, and quantity (1).
 12. Locate and click the "Checkout" button.
 13. Verify 2.  User is on the 'Checkout: Your Information' page (`/checkout-step-one.html`) (Result of TC_CHECKOUT_001).
 14.  Enter the provided First Name (`Jane`) into the 'First Name' input field.
 15.  Enter the provided Last Name (`Doe`) into the 'Last Name' input field.
 16.  Enter the provided Postal Code (`12345`) into the 'Postal Code' input field.
 17.  Click the "Continue" button.
 18.  Verify  The current page URL is `/checkout-step-two.html`. And The page title/header indicates 'Checkout: Overview'. And  The item(s) previously added to the cart are correctly listed on the page (verify item name, quantity, price). And  The 'Item total' (subtotal before tax) is correctly calculated and displayed based on the items in the cart. And   A 'Tax' amount is calculated and displayed And  The 'Total' price (Item total + Tax) is correctly calculated and displayed.
 19.  Locate and click the "Finish" button.
 **Expected Results:**
1.  User is successfully navigated away from `/checkout-complete.html`.
2.  User is redirected to the main product list/inventory page (e.g., `/inventory.html`).
3.  The shopping cart icon/indicator shows that the cart is empty (e.g., no number badge).
4.  (Optional) The cart page (`/cart.html`) displays no items.
                               

**Important:** Use only test data provided in test case. do not use any other extra data
**Important:** Ensure efficiency and accuracy throughout the process.
""". If you achieved your ultimate task, stop everything and use the done action in the next step to complete the task. If not, continue as usual.

 HumanMessage 
Example output:

 AIMessage 


 ToolMessage 
Browser started

 HumanMessage 
[Your task history memory starts here]

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üîó  Navigated to https://www.saucedemo.com/

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: ‚å®Ô∏è  Input standard_user into index 0

 HumanMessage 
Action result: ‚å®Ô∏è  Input secret_sauce into index 1

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 6: Add to cart

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 0: Open Menu

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 4: Close Menu

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 0: Open Menu

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üîç  Scrolled down the page by 200 pixels

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üîç  Scrolled to text: Sauce Labs Backpack

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 1: About

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üîó  Navigated to https://www.saucedemo.com/

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: ‚å®Ô∏è  Input standard_user into index 0

 HumanMessage 
Action result: ‚å®Ô∏è  Input secret_sauce into index 1

 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 0: Open Menu

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 3: Reset App State

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: Text 'Checkout' not found or not visible on page

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 7: Sauce Labs Backpack

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 2: Back to products

 HumanMessage 
Action error: Rate limit reached. Waiting before retry.

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 0: Open Menu

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üîç  Scrolled down the page by 200 pixels

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: üñ±Ô∏è  Clicked button with index 8: Add to cart

 HumanMessage 
Action error: Rate limit reached. Waiting before retry.

 HumanMessage 
[Task history memory ends]
[Current state starts here]
The following is one-time information - if you need to remember it write it to memory:
Current url: https://www.saucedemo.com/inventory.html
Available tabs:
[TabInfo(page_id=0, url='https://www.saucedemo.com/inventory.html', title='Swag Labs')]
Interactive elements from top layer of the current page inside the viewport:
... 10 pixels above - scroll or extract content to see more ...
[0]<a All Items/>
[1]<a About/>
[2]<a Logout/>
[3]<a Reset App State/>
[4]<button Close Menu/>
Swag Labs
[5]<a 1/>
Products
Name (A to Z)
[6]<select Name (A to Z)
Name (Z to A)
Price (low to high)
Price (high to low)/>
[7]<a Sauce Labs Backpack/>
carry.allTheThings() with the sleek, streamlined Sly Pack that melds uncompromising style with unequaled laptop and tablet protection.
$
29.99
[8]<button remove-sauce-labs-backpack>Remove/>
[9]<a />
[10]<img />
[11]<a Sauce Labs Bike Light/>
A red light isn't the desired state in testing but it sure helps when riding your bike at night. Water-resistant with 3 lighting modes, 1 AAA battery included.
$
9.99
[12]<button add-to-cart-sauce-labs-bike-light>Add to cart/>
[13]<a Sauce Labs Bolt T-Shirt/>
Get your testing superhero on with the Sauce Labs bolt T-shirt. From American Apparel, 100% ringspun combed cotton, heather gray with red bolt.
$
15.99
[14]<button add-to-cart-sauce-labs-bolt-t-shirt>Add to cart/>
[15]<a />
[16]<img />
[17]<a Sauce Labs Fleece Jacket/>
It's not every day that you come across a midweight quarter-zip fleece jacket capable of handling everything from a relaxing day outdoors to a busy day at the office.
$
49.99
[18]<button add-to-cart-sauce-labs-fleece-jacket>Add to cart/>
[19]<a Sauce Labs Onesie/>
Rib snap infant onesie for the junior automation engineer in development. Reinforced 3-snap bottom closure, two-needle hemmed sleeved and bottom won't unravel.
$
7.99
[20]<button add-to-cart-sauce-labs-onesie>Add to cart/>
[21]<a />
[22]<img />
[23]<a Test.allTheThings() T-Shirt (Red)/>
This classic Sauce Labs t-shirt is perfect to wear when cozying up to your keyboard to automate a few tests. Super-soft and comfy ringspun combed cotton.
$
15.99
[24]<button add-to-cart-test.allthethings()-t-shirt-(red)>Add to cart/>
¬©
2025
Sauce Labs. All Rights Reserved. Terms of Service | Privacy Policy
[End of page]
Current step: 23/100Current date and time: 2025-03-31 17:11

 RESPONSE
{
  "current_state": {
    "evaluation_previous_goal": "Unknown - Unable to locate checkout options.",
    "memory": "Back on the inventory page, but I still need to access the cart. 21 out of 100 steps completed. Current URL is https://www.saucedemo.com/inventory.html.",
    "next_goal": "Locate the 'Checkout' button."
  },
  "action": [
    {
      "scroll_to_text": {
        "text": "Checkout"
      }
    }
  ]
}